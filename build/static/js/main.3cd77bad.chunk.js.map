{"version":3,"sources":["components/Header.js","components/Badges.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","alt","className","to","Badges","class","Home","App","path","component","Error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAuBeA,MAlBf,WACI,OACI,yBAAKC,GAAG,YACJ,yBAAKA,GAAG,eACR,yBAAKA,GAAG,aAAaC,IAAI,KACzB,wBAAID,GAAG,SAAP,cAA0B,8CAA1B,IAAoD,6BAApD,+BACA,yBAAKA,GAAG,cACJ,kBAAC,IAAD,CAASE,UAAU,OAAOF,GAAG,aAAaG,GAAG,KACzC,uBAAGD,UAAU,WAAb,UAEJ,kBAAC,IAAD,CAASA,UAAU,OAAOF,GAAG,YAAYG,GAAG,KAAI,uCAChD,kBAAC,IAAD,CAASD,UAAU,OAAOF,GAAG,UAAUG,GAAG,KAAI,yCAC9C,kBAAC,IAAD,CAASD,UAAU,OAAOF,GAAG,UAAUG,GAAG,KAAI,yC,MCmB/CC,MAjCf,WACI,OACI,yBAAKJ,GAAG,eAGR,yBAAKA,GAAG,gBACR,yBAAKC,IAAI,mBACT,0CACA,uBAAGC,UAAU,cAAb,yDAAgF,6BAAhF,qDAGA,yBAAKF,GAAG,gBACR,yBAAKC,IAAI,mBACT,qCACA,uBAAIC,UAAU,cAAd,uCAA+D,6BAA/D,YAA6E,0BAAMG,MAAM,YAAZ,UAA7E,mBAGA,yBAAKL,GAAG,gBACR,yBAAKC,IAAI,mBACT,0CACA,uBAAIC,UAAU,cAAd,yDAAiF,6BAAjF,qDAGA,yBAAKF,GAAG,gBACR,yBAAKC,IAAI,mBACT,0CACA,uBAAIC,UAAU,cAAd,yDAAiF,6BAAjF,uDChBOI,MATf,WACI,OACI,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCSOC,MAXf,WACE,OACE,yBAAKL,UAAU,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,IAAIC,UAAYH,IAC5B,kBAAC,IAAD,CAAOG,UAAYC,WCCLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3cd77bad.chunk.js","sourcesContent":["import React from \"react\";\nimport '../Css/Header.css';\nimport { NavLink } from \"react-router-dom\";\n\n\nfunction Header() {\n    return (\n        <div id=\"headerbg\">\n            <div id=\"profilediv\"></div>\n            <img id=\"profilepic\" alt=\"\"/>\n            <h2 id=\"hello\">Hello, I'm <mark>Paul Racisz.</mark> <br/>I'm a full stack developer.</h2>\n            <div id=\"navlinkdiv\">\n                <NavLink className=\"navs\" id=\"contactnav\" to=\"/\">\n                    <p className=\"navtext\"> Home</p>\n                </NavLink>\n                <NavLink className=\"navs\" id=\"resumenav\" to=\"/\"><p > Resume</p></NavLink>\n                <NavLink className=\"navs\" id=\"worknav\" to=\"/\"><p> Projects</p></NavLink>\n                <NavLink className=\"navs\" id=\"linknav\" to=\"/\"><p > About</p></NavLink>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport '../Css/Badges.css';\n\nfunction Badges() {\n    return (\n        <div id=\"bigbadgebox\">\n\n\n        <div id=\"divformobile\">\n        <img alt=\"badgeformobile\"></img>\n        <h2>Compatible</h2>\n        <p className=\"flavortext\">My websites are always built on mobile devices first, <br/>for responive beauty, no matter the screen size.</p>\n        </div>\n\n        <div id=\"divformobile\">\n        <img alt=\"badgeformobile\"></img>\n        <h2>Style</h2>\n        <p  className=\"flavortext\">I don't just build static websites, <br/> I build <span class=\"blinking\">flashy</span> webpages too!</p>\n        </div>\n\n        <div id=\"divformobile\">\n        <img alt=\"badgeformobile\"></img>\n        <h2>Compatible</h2>\n        <p  className=\"flavortext\">My websites are always built on mobile devices first, <br/>for responive beauty, no matter the screen size.</p>\n        </div>\n\n        <div id=\"divformobile\">\n        <img alt=\"badgeformobile\"></img>\n        <h2>Compatible</h2>\n        <p  className=\"flavortext\">My websites are always built on mobile devices first, <br/>for responive beauty, no matter the screen size.</p>\n        </div>\n\n        </div>\n    )\n}\n\nexport default Badges;","import React from \"react\";\nimport Header from \"./Header.js\";\nimport Badges from \"./Badges\";\n\nfunction Home() {\n    return (\n        <>\n        <Header />\n        <Badges />\n        </>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from \"./components/Home\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Switch>\n      <Route path=\"/\" component={ Home }></Route>\n      <Route component={ Error }/>\n    </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}